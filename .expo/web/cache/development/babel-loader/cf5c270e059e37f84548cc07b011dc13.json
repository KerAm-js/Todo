{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { colors } from \"../constants/colors\";\nimport { shadow } from \"../constants/shadows\";\n\nvar TaskBlock = function TaskBlock(_ref) {\n  var id = _ref.id,\n      text = _ref.text,\n      description = _ref.description,\n      date = _ref.date,\n      isCompleted = _ref.isCompleted,\n      isDeadline = _ref.isDeadline,\n      deleteTask = _ref.deleteTask,\n      toggleTaskCompleting = _ref.toggleTaskCompleting,\n      setIsDeadline = _ref.setIsDeadline,\n      showEditModal = _ref.showEditModal,\n      setEditTaskId = _ref.setEditTaskId;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeLeft = _useState4[0],\n      setTimeLeft = _useState4[1];\n\n  var interval = useRef();\n\n  var startTimer = function startTimer() {\n    interval.current = setInterval(function () {\n      var currentDate = new Date();\n      var distance = date - currentDate;\n      var daysString;\n      var hoursString;\n      var minutesString;\n      var secondsString;\n      var timeLeftString;\n\n      if (distance < 0) {\n        clearInterval(interval);\n        setTimeLeft('over');\n      } else {\n        var daysLeft = Math.floor(distance / (1000 * 60 * 60 * 24));\n        var hoursLeft = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n        var minutesLeft = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        var secondsLeft = Math.floor(distance % (1000 * 60) / 1000);\n\n        if (daysLeft === 0 && hoursLeft === 0 && minutesLeft < 30 && isDeadline === false) {\n          setIsDeadline(true);\n        }\n\n        daysString = daysLeft >= 10 ? \"\" + daysLeft : \"0\" + daysLeft;\n        hoursString = hoursLeft >= 10 ? \"\" + hoursLeft : \"0\" + hoursLeft;\n        minutesString = minutesLeft >= 10 ? \"\" + minutesLeft : \"0\" + minutesLeft;\n        secondsString = secondsLeft >= 10 ? \"\" + secondsLeft : \"0\" + secondsLeft;\n\n        if (daysLeft > 0) {\n          timeLeftString = daysString + \" \\u0434\\u043D\";\n        } else if (daysLeft === 0 && hoursLeft > 0) {\n          timeLeftString = hoursString + \":\" + minutesString;\n        } else if (hoursLeft === 0 && minutesLeft > 0) {\n          timeLeftString = minutesString + \":\" + secondsString;\n        } else if (minutesLeft === 0 && secondsLeft > 0) {\n          timeLeftString = minutesString + \":\" + secondsString;\n        }\n\n        setTimeLeft(timeLeftString);\n      }\n    }, 1000);\n  };\n\n  useEffect(function () {\n    startTimer();\n    return function () {\n      return clearInterval(interval.current);\n    };\n  });\n  var circleColor = '#fff';\n\n  if (isCompleted) {\n    circleColor = colors.SUCCESS;\n  } else if (isDeadline || timeLeft === 'over') {\n    circleColor = colors.DANGER;\n  }\n\n  var containerHeight = {\n    height: isOpen ? 'auto' : 90\n  };\n  return React.createElement(View, {\n    style: _objectSpread({}, shadow)\n  }, React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.container), containerHeight),\n    onPress: function onPress() {\n      return setIsOpen(!isOpen);\n    }\n  }, React.createElement(View, {\n    style: styles.headingRow\n  }, React.createElement(Text, {\n    style: styles.text\n  }, text))));\n};\n\nexport default TaskBlock;\nvar styles = StyleSheet.create({\n  container: {\n    minHeight: 90,\n    backgroundColor: colors.ACCENT,\n    marginBottom: 20,\n    paddingHorizontal: 15,\n    paddingVertical: 13,\n    borderRadius: 20,\n    overflow: \"hidden\"\n  },\n  headingRow: {\n    minHeight: 60,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: 'center',\n    marginBottom: 15\n  },\n  text: {\n    color: '#fff',\n    fontSize: 20\n  },\n  descriptionRow: {\n    paddingRight: 90\n  },\n  description: {\n    color: '#fff',\n    fontSize: 18\n  },\n  buttonsRow: {\n    marginTop: 25,\n    flexDirection: \"row\"\n  },\n  button: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 20\n  },\n  icon: {\n    width: 20,\n    height: 20\n  },\n  circle: {\n    alignSelf: \"flex-start\",\n    width: 60,\n    height: 60,\n    borderRadius: 60 / 2,\n    borderWidth: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  time: {\n    color: '#fff',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["/Users/amirk/Documents/Todo/src/components/Tasks/TaskBLock.js"],"names":["React","useState","useEffect","useRef","TouchableOpacity","colors","shadow","TaskBlock","id","text","description","date","isCompleted","isDeadline","deleteTask","toggleTaskCompleting","setIsDeadline","showEditModal","setEditTaskId","isOpen","setIsOpen","timeLeft","setTimeLeft","interval","startTimer","current","setInterval","currentDate","Date","distance","daysString","hoursString","minutesString","secondsString","timeLeftString","clearInterval","daysLeft","Math","floor","hoursLeft","minutesLeft","secondsLeft","circleColor","SUCCESS","DANGER","containerHeight","height","styles","container","headingRow","StyleSheet","create","minHeight","backgroundColor","ACCENT","marginBottom","paddingHorizontal","paddingVertical","borderRadius","overflow","flexDirection","justifyContent","alignItems","color","fontSize","descriptionRow","paddingRight","buttonsRow","marginTop","button","width","marginRight","icon","circle","alignSelf","borderWidth","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { StyleSheet, Text, View, Image } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { colors } from \"../constants/colors\";\nimport { shadow } from \"../constants/shadows\";\n\nconst TaskBlock = ({\n  id,\n  text, \n  description, \n  date, \n  isCompleted, \n  isDeadline, \n  deleteTask, \n  toggleTaskCompleting,\n  setIsDeadline,\n  showEditModal,\n  setEditTaskId,\n}) => {\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [timeLeft, setTimeLeft] = useState();\n\n  let interval = useRef();\n\n  const startTimer = () => {\n\n    interval.current = setInterval(() => {\n      const currentDate = new Date();\n      const distance = date - currentDate;\n\n      let daysString;\n      let hoursString;\n      let minutesString;\n      let secondsString;\n      let timeLeftString;\n\n      if (distance < 0) {\n        clearInterval(interval);\n        setTimeLeft('over')\n      } else {\n        const daysLeft = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const hoursLeft = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n        const minutesLeft = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        const secondsLeft = Math.floor(distance % (1000 * 60) / 1000);\n        \n        if (daysLeft === 0 && hoursLeft === 0 && minutesLeft < 30 && isDeadline === false) {\n          setIsDeadline(true);\n        }\n        // console.log(`${daysLeft}:${hoursLeft}:${minutesLeft}:${secondsLeft}`);\n\n        daysString = daysLeft >= 10 ? `${daysLeft}` : `0${daysLeft}`;\n        hoursString = hoursLeft >= 10 ? `${hoursLeft}` : `0${hoursLeft}`;\n        minutesString = minutesLeft >= 10 ? `${minutesLeft}` : `0${minutesLeft}`;\n        secondsString = secondsLeft >= 10 ? `${secondsLeft}` : `0${secondsLeft}`;\n\n        if (daysLeft > 0) {\n          timeLeftString = `${daysString} дн`\n        } else if (daysLeft === 0 && hoursLeft > 0) {\n          timeLeftString = `${hoursString}:${minutesString}`;\n        } else if (hoursLeft === 0 && minutesLeft > 0 ) {\n          timeLeftString = `${minutesString}:${secondsString}`;\n        } else if (minutesLeft === 0 && secondsLeft > 0) {\n          timeLeftString = `${minutesString}:${secondsString}`;\n        } \n        setTimeLeft(timeLeftString);\n      }\n    }, 1000);\n  }\n\n  useEffect(() => {\n    startTimer();\n    return () => clearInterval(interval.current);\n  })\n\n  let circleColor = '#fff';\n\n  if (isCompleted) {\n    circleColor = colors.SUCCESS;\n  } else if (isDeadline || timeLeft === 'over') {\n    circleColor = colors.DANGER;\n  }\n\n  let containerHeight = {\n    height: isOpen ? 'auto' : 90,\n  };\n\n  return (\n    <View style={{...shadow}}>\n      <TouchableOpacity \n        style={{...styles.container, ...containerHeight}}\n        onPress={() => setIsOpen(!isOpen)}\n      >\n        <View style={styles.headingRow}>\n          <Text style={styles.text}>{text}</Text>\n          {/* <View style={{...styles.circle, borderColor: circleColor}}>\n            {\n              isCompleted\n              ? <Image \n                  style={{width: 20, height: 20,}}\n                  source={require('../../images/completed.png')}\n                />\n              : timeLeft === 'over' \n                ? <Image \n                    style={{width: 20, height: 20,}}\n                    source={require('../../images/over.png')}\n                  />\n                : <Text style={styles.time}>{timeLeft}</Text>\n            }\n          </View> */}\n        </View>\n      </TouchableOpacity>\n    </View>\n  )\n}          \n\nexport default TaskBlock;\n\nconst styles = StyleSheet.create({\n  container: {\n    minHeight: 90,\n    backgroundColor: colors.ACCENT,\n    marginBottom: 20,\n    paddingHorizontal: 15,\n    paddingVertical: 13,\n    borderRadius: 20,\n    overflow: \"hidden\",\n  },\n  headingRow: {\n    minHeight: 60,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  text: {\n    color: '#fff',\n    fontSize: 20,\n  },\n  descriptionRow: {\n    paddingRight: 90,\n  },\n  description: {\n    color: '#fff',\n    fontSize: 18,\n  },\n  buttonsRow: {\n    marginTop: 25,\n    flexDirection: \"row\",\n  },\n  button: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 20,\n  },\n  icon: {\n    width: 20,\n    height: 20,\n  },\n  circle: {\n    alignSelf: \"flex-start\",\n    width: 60,\n    height: 60,\n    borderRadius: 60/2,\n    borderWidth: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  time: { \n    color: '#fff',\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}