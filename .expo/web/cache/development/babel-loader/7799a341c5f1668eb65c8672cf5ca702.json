{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AddTaskButton from \"../../components/AddTaskButton\";\nimport TaskBlock from \"../../components/Tasks/TaskBLock\";\nimport ModalLayout from \"../../layouts/ModalLayout\";\nimport GradientLayout from \"../../layouts/GradientLayout\";\nimport TaskForm from \"../../components/Tasks/TaskForm\";\nimport FooterSpace from \"../../components/FooterSpace\";\n\nvar TasksScreen = function TasksScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editTaskId = _useState4[0],\n      setEditTaskId = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      addModalVisible = _useState6[0],\n      setAddModalVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      editModalVisible = _useState8[0],\n      setEditModalVisible = _useState8[1];\n\n  var editTask = function editTask(text, date, description) {\n    var currentTask = tasks.find(function (task) {\n      return task.id === editTaskId;\n    });\n\n    var tasksCopy = _toConsumableArray(tasks);\n\n    var task = tasksCopy.find(function (task) {\n      return task.id === editTaskId;\n    });\n    console.log(editTaskId);\n\n    if (currentTask.text === text && currentTask.date === date && currentTask.description === description) {\n      null;\n    } else {\n      task.text = text;\n      task.date = date;\n      task.description = description;\n    }\n\n    setTasks(tasksCopy);\n    setEditTaskId(null);\n  };\n\n  var addTask = function addTask(text, date, description) {\n    setTasks([{\n      id: tasks.length + \".\" + new Date().toLocaleString(),\n      listNumber: tasks.length,\n      text: text,\n      date: date,\n      description: description,\n      isCompleted: false,\n      isDeadline: false\n    }].concat(_toConsumableArray(tasks)));\n  };\n\n  var _deleteTask = function deleteTask(id) {\n    setTasks(function (previous) {\n      return previous.filter(function (task) {\n        return task.id !== id;\n      });\n    });\n  };\n\n  var _toggleTaskCompleting = function toggleTaskCompleting(id, isCompleted) {\n    var tasksCopy = _toConsumableArray(tasks);\n\n    var task = tasksCopy.find(function (task) {\n      return task.id === id;\n    });\n    task.isCompleted = !isCompleted;\n    setTasks(tasksCopy);\n  };\n\n  var _setIsDeadline = function setIsDeadline(id, isDeadline) {\n    var tasksCopy = _toConsumableArray(tasks);\n\n    var task = tasksCopy.find(function (task) {\n      return task.id === id;\n    });\n    task.isDeadline = isDeadline;\n    setTasks(tasksCopy);\n  };\n\n  return React.createElement(GradientLayout, {\n    style: styles.container\n  }, React.createElement(ScrollView, {\n    style: styles.scrollContainer\n  }, React.createElement(AddTaskButton, {\n    showModal: function showModal() {\n      return setAddModalVisible(true);\n    }\n  }), React.createElement(ModalLayout, {\n    visible: addModalVisible,\n    closeModal: function closeModal() {\n      return setAddModalVisible(false);\n    }\n  }, React.createElement(TaskForm, {\n    type: \"add\",\n    closeModal: function closeModal() {\n      return setAddModalVisible(false);\n    },\n    addTask: addTask\n  })), tasks.length !== 0 && editTaskId ? React.createElement(ModalLayout, {\n    visible: editModalVisible,\n    closeModal: function closeModal() {\n      return setEditModalVisible(false);\n    }\n  }, React.createElement(TaskForm, {\n    type: \"edit\",\n    closeModal: function closeModal() {\n      return setEditModalVisible(false);\n    },\n    editTask: editTask,\n    task: tasks.find(function (task) {\n      return task.id === editTaskId;\n    })\n  })) : null, tasks.map(function (task, index) {\n    return React.createElement(TaskBlock, _extends({}, task, {\n      key: index,\n      showEditModal: function showEditModal() {\n        return setEditModalVisible(true);\n      },\n      deleteTask: function deleteTask() {\n        return _deleteTask(task.id);\n      },\n      toggleTaskCompleting: function toggleTaskCompleting() {\n        return _toggleTaskCompleting(task.id, task.isCompleted);\n      },\n      setIsDeadline: function setIsDeadline(isDeadline) {\n        return _setIsDeadline(task.id, isDeadline);\n      },\n      setEditTaskId: setEditTaskId\n    }));\n  }), React.createElement(FooterSpace, null)));\n};\n\nexport default TasksScreen;\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 130\n  },\n  scrollContainer: {\n    paddingHorizontal: 30\n  }\n});","map":{"version":3,"sources":["/Users/amirk/Documents/Todo/src/screens/Tasks/TasksScreen.js"],"names":["React","useState","AddTaskButton","TaskBlock","ModalLayout","GradientLayout","TaskForm","FooterSpace","TasksScreen","tasks","setTasks","editTaskId","setEditTaskId","addModalVisible","setAddModalVisible","editModalVisible","setEditModalVisible","editTask","text","date","description","currentTask","find","task","id","tasksCopy","console","log","addTask","length","Date","toLocaleString","listNumber","isCompleted","isDeadline","deleteTask","previous","filter","toggleTaskCompleting","setIsDeadline","styles","container","scrollContainer","map","index","StyleSheet","create","paddingTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Alert, ScrollView, StyleSheet, Text, View } from \"react-native\";\nimport AddTaskButton from \"../../components/AddTaskButton\";\nimport TaskBlock from \"../../components/Tasks/TaskBLock\";\nimport ModalLayout from \"../../layouts/ModalLayout\";\nimport GradientLayout from \"../../layouts/GradientLayout\";\nimport TaskForm from \"../../components/Tasks/TaskForm\";\nimport FooterSpace from \"../../components/FooterSpace\";\n\n\nconst TasksScreen = () => {\n\n  const [tasks, setTasks] = useState([]);\n  const [editTaskId, setEditTaskId] = useState();\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [editModalVisible, setEditModalVisible] = useState(false);\n\n  const editTask = (text, date, description) => {\n    const currentTask = tasks.find(task => task.id === editTaskId);\n    const tasksCopy = [...tasks];\n    const task = tasksCopy.find(task => task.id === editTaskId);\n    console.log(editTaskId);\n    if (\n      currentTask.text === text && \n      currentTask.date === date && \n      currentTask.description === description\n    ) {\n      null\n    } else {\n      task.text = text;\n      task.date = date;\n      task.description = description;\n    } \n    setTasks(tasksCopy);\n    setEditTaskId(null);\n  }; \n\n  const addTask = (text, date, description) => {\n    setTasks([\n      {\n        id: `${tasks.length}.${new Date().toLocaleString()}`,\n        listNumber: tasks.length,\n        text,\n        date,\n        description,\n        isCompleted: false,\n        isDeadline: false,\n      },\n      ...tasks\n    ])\n  }\n\n  const deleteTask = id => {\n    setTasks(previous => previous.filter(task => task.id !== id ))\n  }\n\n  const toggleTaskCompleting = (id, isCompleted) => {\n    const tasksCopy = [...tasks];\n    const task = tasksCopy.find(task => task.id === id)\n    task.isCompleted = !isCompleted;\n    setTasks(tasksCopy);\n  }\n\n  const setIsDeadline = (id, isDeadline) => {\n    const tasksCopy = [...tasks];\n    const task = tasksCopy.find(task => task.id === id)\n    task.isDeadline = isDeadline;\n    setTasks(tasksCopy);\n  }\n\n  return (\n    <GradientLayout style={styles.container}>\n      <ScrollView style={styles.scrollContainer}>\n        <AddTaskButton showModal={() => setAddModalVisible(true)}/>\n        <ModalLayout \n          visible={addModalVisible} \n          closeModal={() => setAddModalVisible(false)}\n        >\n          <TaskForm \n            type=\"add\"\n            closeModal={() => setAddModalVisible(false)} \n            addTask={addTask}\n          />\n        </ModalLayout>\n        {\n          tasks.length !== 0 && editTaskId\n            ? <ModalLayout \n                visible={editModalVisible} \n                closeModal={() => setEditModalVisible(false)}\n              >\n                <TaskForm \n                  type=\"edit\"\n                  closeModal={() => setEditModalVisible(false)} \n                  editTask={editTask}\n                  task={tasks.find(task => task.id === editTaskId)}\n                />\n              </ModalLayout>\n            : null\n        }\n        {\n          tasks.map((task, index) => (\n            <TaskBlock \n              {...task} \n              key={index}\n              showEditModal={() => setEditModalVisible(true)}\n              deleteTask={() => deleteTask(task.id)}\n              toggleTaskCompleting={\n                () => toggleTaskCompleting(task.id, task.isCompleted)\n              }\n              setIsDeadline={\n                isDeadline => setIsDeadline(task.id, isDeadline)\n              }\n              setEditTaskId={setEditTaskId}\n            />\n          ))\n        }\n        <FooterSpace />\n      </ScrollView>\n    </GradientLayout>\n  )\n}\n\nexport default TasksScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 130,\n  },\n  scrollContainer: {\n    paddingHorizontal: 30,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}